Trapping Rain Water - Explanation
Understanding the Problem
We are given an array height[] where:

Each element represents the height of a bar in a histogram.
The width of each bar is 1.
We need to calculate how much water can be trapped between the bars after raining.
Example Walkthrough
Input:

js
Copy
Edit
height = [0,1,0,2,1,0,1,3,2,1,2,1]
Visual Representation:

          â–ˆ
    â–ˆ     â–ˆ  
    â–ˆ  â–ˆ  â–ˆ   â–ˆ
    â–ˆ  â–ˆ  â–ˆ â–ˆ â–ˆ
    â–ˆ  â–ˆ â–ˆâ–ˆ â–ˆ â–ˆ
-----------------
The total trapped water in this example is 6 units.
Approach 1: Brute Force (O(nÂ²))
For each bar, calculate:
leftMax: Maximum height to the left.
rightMax: Maximum height to the right.
Water trapped at current bar: min(leftMax, rightMax) - height[i]
Sum up all trapped water.

function trap(height) {
    let n = height.length;
    let totalWater = 0;

    for (let i = 0; i < n; i++) {
        let leftMax = 0, rightMax = 0;
        
        // Find max to the left
        for (let j = i; j >= 0; j--) {
            leftMax = Math.max(leftMax, height[j]);
        }
        
        // Find max to the right
        for (let j = i; j < n; j++) {
            rightMax = Math.max(rightMax, height[j]);
        }

        // Calculate water trapped
        totalWater += Math.min(leftMax, rightMax) - height[i];
    }

    return totalWater;
}

console.log(trap([0,1,0,2,1,0,1,3,2,1,2,1])); // Output: 6



ðŸ”´ Time Complexity: O(nÂ²) (because of nested loops)
ðŸ”´ Space Complexity: O(1) (no extra space used)


Approach 2: Two Pointers (O(n))
Optimized Explanation
Use two pointers (left and right) to move inward.
Track leftMax and rightMax, which store the highest bars seen so far from the left and right.
Water trapped at any position depends on the smaller boundary (min(leftMax, rightMax) - height[i]).
Code (Two Pointers)


function trap(height) {
    let left = 0, right = height.length - 1;
    let leftMax = 0, rightMax = 0;
    let totalWater = 0;

    while (left < right) {
        if (height[left] < height[right]) {
            if (height[left] >= leftMax) {
                leftMax = height[left]; // Update leftMax
            } else {
                totalWater += leftMax - height[left]; // Trap water
            }
            left++;
        } else {
            if (height[right] >= rightMax) {
                rightMax = height[right]; // Update rightMax
            } else {
                totalWater += rightMax - height[right]; // Trap water
            }
            right--;
        }
    }

    return totalWater;
}

console.log(trap([0,1,0,2,1,0,1,3,2,1,2,1])); // Output: 6

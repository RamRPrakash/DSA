Sliding Window Problems
Letâ€™s start with Maximum Sum Subarray(Kadaneâ€™s Algorithm) first.I'll explain the problem statement and approach. ðŸš€

roblem: Maximum Sum Subarray(Kadaneâ€™s Algorithm)
Problem Statement
Given an integer array nums, find the contiguous subarray(containing at least one number) that has the largest sum and return its sum.

    Example
Input: nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
Output: 6
Explanation: The subarray[4, -1, 2, 1] has the maximum sum = 6.

Approach: Kadaneâ€™s Algorithm(Sliding Window)
âœ… Keep track of the maximum sum ending at each index
âœ… If the sum becomes negative, reset to 0
âœ… Track the global max sum

function maxSubArray(nums) {
    let maxSum = nums[0];
    let currentSum = 0;

    for (let num of nums) {
        if (currentSum < 0) currentSum = 0; // Reset if negative
        currentSum += num;
        maxSum = Math.max(maxSum, currentSum);
    }

    return maxSum;
}

// Test Case
console.log(maxSubArray([-2, 1, -3, 4, -1, 2, 1, -5, 4])); // Output: 6

function maxSubArray(nums) {
    let maxSum = nums[0];  // Maximum subarray sum
    let currentSum = 0;     // Current sum
    let start = 0, end = 0, tempStart = 0;

    for (let i = 0; i < nums.length; i++) {
        if (currentSum < 0) {
            currentSum = 0; // Reset when sum becomes negative
            tempStart = i;  // Potential new subarray start
        }

        currentSum += nums[i];

        if (currentSum > maxSum) {
            maxSum = currentSum;
            start = tempStart; // Update start index
            end = i;           // Update end index
        }
    }

    return {
        maxSum,
        subarray: nums.slice(start, end + 1)
    };
}

// Test Case
console.log(maxSubArray([-2, 1, -3, 4, -1, 2, 1, -5, 4]));
// Output: { maxSum: 6, subarray: [4, -1, 2, 1] }

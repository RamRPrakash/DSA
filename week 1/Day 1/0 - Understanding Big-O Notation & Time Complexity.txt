Day 1: Understanding Big-O Notation & Time Complexity

📌 Step 1: Why is Time Complexity Important?
In coding interviews, the efficiency of your solution matters as much as correctness.

Bad Code (O(n²)): Works but too slow for large inputs.

Optimal Code (O(log n)): Runs efficiently for large inputs.


📌 Step 2: Understanding Big-O Notation
Big-O describes the worst-case performance of an algorithm.

O(1) - Constant Time → Fastest! 🚀

function getFirstElement(arr) {
  return arr[0]; // Always takes 1 step
}


O(log n) - Logarithmic Time → Divides problem each step

function binarySearch(arr, target) {
  let left = 0, right = arr.length - 1;
  while (left <= right) {
    let mid = Math.floor((left + right) / 2);
    if (arr[mid] === target) return mid;
    if (arr[mid] < target) left = mid + 1;
    else right = mid - 1;
  }
  return -1;
}


O(n) - Linear Time → Loops through input once

function sumArray(arr) {
  let sum = 0;
  for (let num of arr) {
    sum += num;
  }
  return sum;
}


O(n²) - Quadratic Time → Nested loops (Slow 🚨)

function printPairs(arr) {
  for (let i = 0; i < arr.length; i++) {
    for (let j = 0; j < arr.length; j++) {
      console.log(arr[i], arr[j]);
    }
  }
}


O(2ⁿ) - Exponential Time → Bruteforce recursion

function fibonacci(n) {
  if (n <= 1) return n;
  return fibonacci(n - 1) + fibonacci(n - 2);
}


Task : 
function mystery(n) {
  let count = 0;
  for (let i = 1; i < n; i *= 2) {
    count++;
  }
  return count;
}
o(log n)

: Nested Logarithm Complexity
What is the time complexity of this function?

js
Copy
Edit
function logExample(n) {
  for (let i = n; i > 1; i /= 2) {   // Loop 1
    for (let j = 1; j < i; j *= 2) {  // Loop 2
      console.log(i, j);
    }
  }
}
Options:
a) O(n)
b) O(n log n)
c) O(log² n)
d) O(n²)

👉 What’s your answer? Explain why! 🚀







You said:
O(log² n)
ChatGPT said:
✅ Correct! The time complexity is O(log² n).

Explanation:
Let's break it down:

Outer Loop (i /= 2):
Starts at n and divides by 2 in each iteration.
Runs log₂(n) times (O(log n)).
Inner Loop (j *= 2):
Starts at 1 and multiplies by 2 in each iteration.
Runs log₂(i) times.
In the worst case (i = n), it runs O(log n).
Total Complexity:
Since the inner loop runs log n times for each iteration of the outer loop,

𝑂(log 𝑛) × 𝑂(log 𝑛 ) = 𝑂(log^2 𝑛)

function recursiveFunc(n) {
  if (n <= 1) return;
  console.log(n);
  recursiveFunc(n - 1);
}

 O(n).

 
